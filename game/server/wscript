#! /usr/bin/env python
# encoding: utf-8

from waflib import Utils
import os
import vpc_parser

top = '.'
PROJECT_NAME = 'server'

games = {
	'mapbase_episodic': ['server_base.vpc', 'server_mapbase.vpc', 'server_episodic.vpc'],
	'mapbase_hl2': ['server_base.vpc', 'server_mapbase.vpc', 'server_hl2.vpc'],
}

def options(opt):
	return

def configure(conf):
	game = conf.options.GAMES
	conf.env.GAMES = game

	conf.env.append_unique('DEFINES', ['DISABLE_STEAM=1'])
	conf.define('MAPBASE_VSCRIPT', 1)
	conf.define('MAPBASE', 1)

	if game not in games.keys():
		conf.fatal("Couldn't find game: ", game)

def build(bld):
	game = vpc_parser.parse_vpcs( bld.env, games[bld.env.GAMES], '../..' )

	includes = [
		'.',
		'../shared',
		'../../utils/common',
		'../shared/econ',
		'NextBot',
		'../../common',
		'../../public/tier0',
		'../../public/tier1',
		'../../public'
	]

	defines = []

	libs = ['tier0','particles','dmxloader','tier1','tier2','tier3','mathlib','vstdlib','choreoobjects','steam_api', 'vscript']
	if bld.env.DEST_OS == 'win32':
		libs += ['USER32']

	install_path = bld.env.PREFIX
	if bld.env.DEST_OS != 'android':
		install_path += '/'+bld.env.GAMES+'/bin'

	source = game["sources"] + ['../../public/tier0/memoverride.cpp']
	includes += game["includes"]
	defines = game["defines"]

	defines.remove('PROTECTED_THINGS_ENABLE')

	bld.shlib(
		source   = source,
		target   = PROJECT_NAME,
		name     = PROJECT_NAME,
		features = 'c cxx',
		includes = includes,
		defines  = defines,
		install_path = install_path,
		use      = libs,
		subsystem = bld.env.MSVC_SUBSYSTEM,
		idx      = bld.get_taskgen_count()
	)

